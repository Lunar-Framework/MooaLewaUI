using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace Lunar.Framework.MooaLewaUI.SourceGenerator;

internal class MlXamlCodeGenerator
{
    public static SyntaxTree Generate(List<IMlXamlNode> astNodes)
    {
        var rootVariable = LocalDeclarationStatement(
            VariableDeclaration(IdentifierName("var"))
                .AddVariables(
                    VariableDeclarator("root")
                        .WithInitializer(EqualsValueClause(ObjectCreationExpression(IdentifierName("UIRoot"))))
                )
        );

        var statements = new List<StatementSyntax> { rootVariable };
        statements.AddRange(astNodes.Select(GenerateNodeAddition));

        var methodDeclaration = MethodDeclaration(
                PredefinedType(Token(SyntaxKind.VoidKeyword)),
                Identifier("InitializeUI")
            )
            .AddModifiers(Token(SyntaxKind.PublicKeyword), Token(SyntaxKind.StaticKeyword))
            .WithBody(Block(statements));

        var classDeclaration = ClassDeclaration("GeneratedUI")
            .AddModifiers(Token(SyntaxKind.PublicKeyword))
            .AddMembers(methodDeclaration);

        var namespaceDeclaration = NamespaceDeclaration(IdentifierName("Lunar.Framework.MooaLewaUI.MlXaml.Generated"))
            .AddMembers(classDeclaration);

        var compilationUnit = CompilationUnit()
            .AddUsings(UsingDirective(IdentifierName("System")))
            .AddMembers(namespaceDeclaration)
            .WithLeadingTrivia(
                Comment("// <auto-generated>"),
                Comment("// This file was generated by MlXamlCodeGenerator."),
                Comment("// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated."),
                Comment("// </auto-generated>"),
                CarriageReturnLineFeed
            );


        return CSharpSyntaxTree.Create(compilationUnit.NormalizeWhitespace());
    }

    private static StatementSyntax GenerateNodeAddition(IMlXamlNode node)
    {
        return node switch
        {
            TextBlockNode textBlockNode => GenerateTextBlockCode(textBlockNode),
            SpriteNode spriteNode => GenerateSpriteCode(spriteNode),
            _ => throw new NotSupportedException($"Unsupported node type: {node.GetType().Name}")
        };
    }

    private static StatementSyntax GenerateTextBlockCode(TextBlockNode node)
    {
        return ExpressionStatement(
            InvocationExpression(
                MemberAccessExpression(
                    SyntaxKind.SimpleMemberAccessExpression,
                    IdentifierName("root.Children"),
                    IdentifierName("Add")
                )
            ).AddArgumentListArguments(
                Argument(
                    ObjectCreationExpression(IdentifierName("TextBlock"))
                        .WithInitializer(
                            InitializerExpression(
                                SyntaxKind.ObjectInitializerExpression,
                                SeparatedList<ExpressionSyntax>(
                                    new[]
                                    {
                                        AssignmentExpression(
                                            SyntaxKind.SimpleAssignmentExpression,
                                            IdentifierName("Text"),
                                            LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(node.Text))
                                        ),
                                        AssignmentExpression(
                                            SyntaxKind.SimpleAssignmentExpression,
                                            IdentifierName("Font"),
                                            InvocationExpression(IdentifierName("LoadFont")).AddArgumentListArguments(
                                                Argument(LiteralExpression(SyntaxKind.StringLiteralExpression,
                                                    Literal(node.Font)))
                                            )
                                        )
                                    }
                                )
                            )
                        )
                )
            )
        );
    }

    private static StatementSyntax GenerateSpriteCode(SpriteNode node)
    {
        return ExpressionStatement(
            InvocationExpression(
                MemberAccessExpression(
                    SyntaxKind.SimpleMemberAccessExpression,
                    IdentifierName("root.Children"),
                    IdentifierName("Add")
                )
            ).AddArgumentListArguments(
                Argument(
                    ObjectCreationExpression(IdentifierName("Sprite"))
                        .WithInitializer(
                            InitializerExpression(
                                SyntaxKind.ObjectInitializerExpression,
                                SeparatedList<ExpressionSyntax>(
                                    new[]
                                    {
                                        AssignmentExpression(
                                            SyntaxKind.SimpleAssignmentExpression,
                                            IdentifierName("Source"),
                                            InvocationExpression(IdentifierName("LoadTexture"))
                                                .AddArgumentListArguments(
                                                    Argument(LiteralExpression(SyntaxKind.StringLiteralExpression,
                                                        Literal(node.Source)))
                                                )
                                        ),
                                        AssignmentExpression(
                                            SyntaxKind.SimpleAssignmentExpression,
                                            IdentifierName("X"),
                                            LiteralExpression(SyntaxKind.NumericLiteralExpression, Literal(node.X))
                                        ),
                                        AssignmentExpression(
                                            SyntaxKind.SimpleAssignmentExpression,
                                            IdentifierName("Y"),
                                            LiteralExpression(SyntaxKind.NumericLiteralExpression, Literal(node.Y))
                                        )
                                    }
                                )
                            )
                        )
                )
            )
        );
    }
}