using System;
using System.Collections.Generic;
using System.Linq;
using Lunar.Framework.MooaLewaUI.Base;
using Lunar.Framework.MooaLewaUI.Base.Controls;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace Lunar.Framework.MooaLewaUI.SourceGenerator;

internal class MlXamlCodeGenerator
{
    public static SyntaxTree Generate(List<IMlXamlNode> astNodes, string className,string nameSpace)
    {
        var rootVariable = LocalDeclarationStatement(
            VariableDeclaration(IdentifierName("var"))
                .AddVariables(
                    VariableDeclarator("root")
                        .WithInitializer(EqualsValueClause(ObjectCreationExpression(IdentifierName("UIRoot"))
                            .WithArgumentList(ArgumentList())))
                )
        );

        var statements = new List<StatementSyntax> { rootVariable };
        statements.AddRange(astNodes.Select(GenerateNodeAddition));

        var methodDeclaration = MethodDeclaration(
                PredefinedType(Token(SyntaxKind.VoidKeyword)),
                Identifier("InitializeUI")
            )
            .AddModifiers(Token(SyntaxKind.PublicKeyword))
            .WithBody(Block(statements));

        var classDeclaration = ClassDeclaration(className)
            .AddModifiers(Token(SyntaxKind.PublicKeyword), Token(SyntaxKind.PartialKeyword))
            .AddMembers(methodDeclaration);
        
        var compilationUnit = CompilationUnit()
            .AddUsings(GenerateUsings())
            .WithLeadingTrivia(
                Comment("// <auto-generated>"),
                Comment("// This file was generated by MlXamlCodeGenerator."),
                Comment(
                    "// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated."),
                Comment("// </auto-generated>"),
                CarriageReturnLineFeed
            );

        if (!string.IsNullOrWhiteSpace(nameSpace))
        {
            var namespaceDeclaration = NamespaceDeclaration(IdentifierName(nameSpace))
                .AddMembers(classDeclaration);

            compilationUnit = compilationUnit.AddMembers(namespaceDeclaration);
        }
        else
        {
            compilationUnit = compilationUnit.AddMembers(classDeclaration);
        }


        return CSharpSyntaxTree.Create(compilationUnit.NormalizeWhitespace());
    }

    private static UsingDirectiveSyntax[] GenerateUsings()
    {
        var usings = new List<UsingDirectiveSyntax>
        {
            UsingDirective(IdentifierName("Lunar.Framework.MooaLewaUI.Base")),
            UsingDirective(IdentifierName("Lunar.Framework.MooaLewaUI.Base.Controls"))
        };

        return usings.ToArray();
    }

    private static StatementSyntax GenerateNodeAddition(IMlXamlNode node)
    {
        return node switch
        {
            TextBlockNode textBlockNode => GenerateTextBlockCode(textBlockNode),
            SpriteNode spriteNode => GenerateSpriteCode(spriteNode),
            _ => throw new NotSupportedException($"Unsupported node type: {node.GetType().Name}")
        };
    }

    private static StatementSyntax GenerateTextBlockCode(TextBlockNode node)
    {
        return ExpressionStatement(
            InvocationExpression(
                MemberAccessExpression(
                    SyntaxKind.SimpleMemberAccessExpression,
                    IdentifierName("root"),
                    IdentifierName("Add")
                )
            ).AddArgumentListArguments(
                Argument(
                    ObjectCreationExpression(IdentifierName(nameof(TextBlock)))
                        .WithInitializer(
                            InitializerExpression(
                                SyntaxKind.ObjectInitializerExpression,
                                SeparatedList<ExpressionSyntax>(
                                    new[]
                                    {
                                        AssignmentExpression(
                                            SyntaxKind.SimpleAssignmentExpression,
                                            IdentifierName(nameof(TextBlock.Text)),
                                            LiteralExpression(SyntaxKind.StringLiteralExpression, Literal(node.Text))
                                        ),
                                        AssignmentExpression(
                                            SyntaxKind.SimpleAssignmentExpression,
                                            IdentifierName(nameof(TextBlock.Font)),
                                            InvocationExpression(
                                                    GeneratorHelper.QualifiedMember(nameof(Utils), nameof(Utils.LoadFont)))
                                                .AddArgumentListArguments(
                                                    Argument(LiteralExpression(SyntaxKind.StringLiteralExpression,
                                                        Literal(node.Font)))
                                                )
                                        )
                                    }
                                )
                            )
                        )
                )
            )
        );
    }

    private static StatementSyntax GenerateSpriteCode(SpriteNode node)
    {
        return ExpressionStatement(
            InvocationExpression(
                MemberAccessExpression(
                    SyntaxKind.SimpleMemberAccessExpression,
                    IdentifierName("root"),
                    IdentifierName("Add")
                )
            ).AddArgumentListArguments(
                Argument(
                    ObjectCreationExpression(IdentifierName(nameof(Sprite)))
                        .WithInitializer(
                            InitializerExpression(
                                SyntaxKind.ObjectInitializerExpression,
                                SeparatedList<ExpressionSyntax>(
                                    new[]
                                    {
                                        AssignmentExpression(
                                            SyntaxKind.SimpleAssignmentExpression,
                                            IdentifierName("Source"),
                                            InvocationExpression(
                                                    GeneratorHelper.QualifiedMember(nameof(Utils), nameof(Utils.LoadTexture)))
                                                .AddArgumentListArguments(
                                                    Argument(LiteralExpression(SyntaxKind.StringLiteralExpression,
                                                        Literal(node.Source)))
                                                )
                                        ),
                                        AssignmentExpression(
                                            SyntaxKind.SimpleAssignmentExpression,
                                            IdentifierName(nameof(Sprite.X)),
                                            LiteralExpression(SyntaxKind.NumericLiteralExpression, Literal(node.X))
                                        ),
                                        AssignmentExpression(
                                            SyntaxKind.SimpleAssignmentExpression,
                                            IdentifierName(nameof(Sprite.Y)),
                                            LiteralExpression(SyntaxKind.NumericLiteralExpression, Literal(node.Y))
                                        )
                                    }
                                )
                            )
                        )
                )
            )
        );
    }
}