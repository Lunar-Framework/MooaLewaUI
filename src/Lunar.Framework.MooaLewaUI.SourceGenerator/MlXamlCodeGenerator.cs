using System;
using System.Collections.Generic;
using System.Linq;
using Lunar.Framework.MooaLewaUI.Controls;
using Lunar.Framework.MooaLewaUI.Utilities;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace Lunar.Framework.MooaLewaUI.SourceGenerator;

internal class MlXamlCodeGenerator
{
    private const string LoadMlxaml = "loadMlXaml";

    public static SyntaxTree Generate(string className, string nameSpace)
    {
        var sourceGeneratorAttributeList = AttributeList(
            SingletonSeparatedList(
                Attribute(
                    IdentifierName("global::System.CodeDom.Compiler.GeneratedCode(\"Lunar.Framework.MooaLewaUI.SourceGenerator.MlXamlSourceGenerator.InitializeComponentCodeGenerator\", \"0.1.0\")")
                    )
                )
            );
        
        var excludeFromCodeCoverageAttributeList = AttributeList(
            SingletonSeparatedList(
                Attribute(
                    IdentifierName("global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage")
                )
            )
        );
        
        var statements = new List<StatementSyntax> { GenerateNodeAddition() };

        var methodDeclaration = MethodDeclaration(
                PredefinedType(Token(SyntaxKind.VoidKeyword)),
                Identifier("InitializeComponent")
            )
            .AddAttributeLists(sourceGeneratorAttributeList, excludeFromCodeCoverageAttributeList)
            .AddModifiers(Token(SyntaxKind.PublicKeyword))
            .AddParameterListParameters(
                Parameter(Identifier(LoadMlxaml))
                    .WithType(PredefinedType(Token(SyntaxKind.BoolKeyword)))
                    .WithDefault(
                        EqualsValueClause(
                            LiteralExpression(SyntaxKind.TrueLiteralExpression))
                    )
            )
            .WithBody(Block(statements));

        var classDeclaration = ClassDeclaration(className)
            .AddModifiers(Token(SyntaxKind.PublicKeyword), Token(SyntaxKind.PartialKeyword))
            .AddMembers(methodDeclaration);

        var compilationUnit = CompilationUnit()
            .AddUsings(GenerateUsings())
            .WithLeadingTrivia(
                Comment("// <auto-generated>"),
                Comment("// This file was generated by MlXamlCodeGenerator."),
                Comment(
                    "// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated."),
                Comment("// </auto-generated>"),
                CarriageReturnLineFeed
            );

        if (!string.IsNullOrWhiteSpace(nameSpace))
        {
            var namespaceDeclaration = NamespaceDeclaration(IdentifierName(nameSpace))
                .AddMembers(classDeclaration);

            compilationUnit = compilationUnit.AddMembers(namespaceDeclaration);
        }
        else
        {
            compilationUnit = compilationUnit.AddMembers(classDeclaration);
        }


        return CSharpSyntaxTree.Create(compilationUnit.NormalizeWhitespace());
    }

    private static UsingDirectiveSyntax[] GenerateUsings()
    {
        var usings = new List<UsingDirectiveSyntax>
        {
            UsingDirective(IdentifierName("Lunar.Framework.MooaLewaUI")),
            UsingDirective(IdentifierName("Lunar.Framework.MooaLewaUI.Controls")),
            UsingDirective(IdentifierName("Lunar.Framework.MooaLewaUI.Utilities"))
        };

        return usings.ToArray();
    }
    
    private static StatementSyntax GenerateNodeAddition()
    {
        var condition = IdentifierName(LoadMlxaml);

        var invocation = InvocationExpression(
            MemberAccessExpression(
                SyntaxKind.SimpleMemberAccessExpression,
                IdentifierName("XlXamlLoader"),
                IdentifierName("Load")
            ),
            ArgumentList(
                SingletonSeparatedList(
                    Argument(ThisExpression())
                )
            )
        );

        var statement = ExpressionStatement(invocation);

        var ifStatement = IfStatement(
            condition: condition,
            statement: Block(statement)
        );

        return ifStatement;
    }
}